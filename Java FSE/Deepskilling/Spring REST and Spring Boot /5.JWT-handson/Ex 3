pom.xml
<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt</artifactId>
    <version>0.9.0</version>
</dependency>

AuthenticationController.java
package com.cognizant.springsecurity.controller;

import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class AuthenticationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthenticationController.class);

    @GetMapping("/authenticate")
    public Map<String, String> authenticate(@RequestHeader("Authorization") String authHeader) {
        LOGGER.info("Start authentication");
        LOGGER.debug("Authorization Header: {}", authHeader);

        String user = getUser(authHeader); // Extract username from Base64
        String token = generateJwt(user);  // Generate JWT for that user

        Map<String, String> map = new HashMap<>();
        map.put("token", token);

        LOGGER.info("End authentication");
        return map;
    }

    private String getUser(String authHeader) {
        String encodedCredentials = authHeader.substring("Basic ".length());
        byte[] decodedBytes = Base64.getDecoder().decode(encodedCredentials);
        String decoded = new String(decodedBytes);
        return decoded.split(":")[0]; // get username only
    }

    private String generateJwt(String user) {
        return Jwts.builder()
                .setSubject(user)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 20 * 60 * 1000)) // 20 min
                .signWith(SignatureAlgorithm.HS256, "secretkey")
                .compact();
    }
}

SecurityConfig.java
@Override
protected void configure(HttpSecurity http) throws Exception {
    http.csrf().disable()
        .httpBasic().and()
        .authorizeRequests()
        .antMatchers("/authenticate").hasAnyRole("USER", "ADMIN") // allow both roles
        .anyRequest().authenticated();
}
